/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.userInterface;

import main.sgt.SGT;
import main.sgt.exceptions.BadlyFormatedFileException;
import main.sgt.exceptions.NaoFoiPossivelAtribuirTurnosException;
import main.sgt.exceptions.TurnoCheioException;

import javax.swing.*;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author pedro
 */
@SuppressWarnings({"FieldCanBeLocal", "unused", "Convert2Lambda", "Anonymous2MethodRef", "TryWithIdenticalCatches"})
public class JAdmin extends javax.swing.JFrame implements Observer {

    private static final int NUM_STATES = 6;
    private SGT sgt;
    private JButton[] buttons = new JButton[NUM_STATES];
    private JCheckBox[] checkBoxes = new JCheckBox[NUM_STATES];
    private final JFileChooser fc = new JFileChooser();
    private JDialog loadingScreen;

    /**
     * Creates new form Admin
     * @param sgt Business logic instance
     */
    JAdmin(SGT sgt) {
        this.sgt = sgt;
        initComponents();
        this.sgt.addObserver(this);
        initLists();
        initCheckBoxes();
    }

    private void initLists() {
        this.buttons[0] = this.jButtonImportUCs;
        this.buttons[1] = this.jButtonImportUtilizadores;
        this.buttons[2] = this.jButtonImportTurnos;
        this.buttons[3] = this.jButtonActivateLogins;
        this.buttons[4] = this.jButtonAssignShifts;
        this.buttons[5] = this.jButtonProibirTrocas;
        this.checkBoxes[0] = this.jCheckBoxUCsRegistadas;
        this.checkBoxes[1] = this.jCheckBoxUsersRegistered;
        this.checkBoxes[2] = this.jCheckBoxTurnosRegistados;
        this.checkBoxes[3] = this.jCheckBoxLoginsActive;
        this.checkBoxes[4] = this.jCheckBoxShiftsAssigned;
        this.checkBoxes[5] = this.jCheckBoxProibirTrocas;
        for(int i=0;i<NUM_STATES;i++){
            for (MouseListener aMl : this.checkBoxes[i].getListeners(MouseListener.class))
                this.checkBoxes[i].removeMouseListener(aMl);
            InputMap im = this.checkBoxes[i].getInputMap();
            im.put(KeyStroke.getKeyStroke("SPACE"), "none");
            im.put(KeyStroke.getKeyStroke("released SPACE"), "none");
        }
    }

    private void initCheckBoxes() {
        int state;
        if(this.sgt.isTrocasPermitidas()){
            state = 6;
        }else if(this.sgt.isTurnosAtribuidos()){
            state = 5;
        }else if(this.sgt.isLoginsAtivos()){
            state = 4;
        }else if(this.sgt.isTurnosRegistados()){
            state = 3;
        }else if(this.sgt.isUsersRegistados()){
            state = 2;
        }else if(this.sgt.isUcsRegistadas()){
            state = 1;
        }else {
            state = 0;
        }
        for(int i=0;i<state;i++){
            this.checkBoxes[i].setSelected(true);
        }
    }

    private void disableFrom(int index){
        while (index<NUM_STATES) {
            this.buttons[index].setEnabled(false);
            this.checkBoxes[index++].setSelected(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxUCsRegistadas = new javax.swing.JCheckBox();
        jCheckBoxUsersRegistered = new javax.swing.JCheckBox();
        jCheckBoxTurnosRegistados = new javax.swing.JCheckBox();
        jCheckBoxLoginsActive = new javax.swing.JCheckBox();
        jCheckBoxShiftsAssigned = new javax.swing.JCheckBox();
        jButtonImportUCs = new javax.swing.JButton();
        jButtonImportUtilizadores = new javax.swing.JButton();
        jButtonImportTurnos = new javax.swing.JButton();
        jButtonActivateLogins = new javax.swing.JButton();
        jButtonAssignShifts = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonConsultUC = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jButtonProibirTrocas = new javax.swing.JButton();
        jCheckBoxProibirTrocas = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jCheckBoxUCsRegistadas.setText("UCs registadas");

        jCheckBoxUsersRegistered.setText("Utilizadores registados");

        jCheckBoxTurnosRegistados.setText("Turnos registados");

        jCheckBoxLoginsActive.setText("Logins ativos");

        jCheckBoxShiftsAssigned.setText("Turnos atribuidos");

        jButtonImportUCs.setText("Importar UCs");
        jButtonImportUCs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportUCsActionPerformed(evt);
            }
        });

        jButtonImportUtilizadores.setText("Importar Utilizadores");
        jButtonImportUtilizadores.setEnabled(this.sgt.isUcsRegistadas());
        jButtonImportUtilizadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportUtilizadoresActionPerformed(evt);
            }
        });

        jButtonImportTurnos.setText("Importar turnos");
        jButtonImportTurnos.setEnabled(this.sgt.isUsersRegistados());
        jButtonImportTurnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportTurnosActionPerformed(evt);
            }
        });

        jButtonActivateLogins.setText("Ativar Logins");
        jButtonActivateLogins.setEnabled(this.sgt.isTurnosRegistados());
        jButtonActivateLogins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActivateLoginsActionPerformed(evt);
            }
        });

        jButtonAssignShifts.setText("Atribuir turnos");
        jButtonAssignShifts.setEnabled(this.sgt.isLoginsAtivos());
        jButtonAssignShifts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAssignShiftsActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonConsultUC.setText("Consultar UCs");
        jButtonConsultUC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultUCActionPerformed(evt);
            }
        });

        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jButtonProibirTrocas.setText("Proibir Trocas");
        jButtonProibirTrocas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProibirTrocasActionPerformed(evt);
            }
        });

        jCheckBoxProibirTrocas.setText("Trocas proibidas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonImportTurnos)
                    .addComponent(jButtonImportUtilizadores)
                    .addComponent(jButtonImportUCs)
                    .addComponent(jButtonActivateLogins)
                    .addComponent(jButtonAssignShifts)
                    .addComponent(jButtonProibirTrocas))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxLoginsActive)
                    .addComponent(jCheckBoxShiftsAssigned)
                    .addComponent(jCheckBoxUsersRegistered)
                    .addComponent(jCheckBoxUCsRegistadas)
                    .addComponent(jCheckBoxTurnosRegistados)
                    .addComponent(jCheckBoxProibirTrocas))
                .addGap(25, 25, 25)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConsultUC)
                        .addContainerGap(100, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLogout)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jButtonConsultUC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLogout))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonImportUCs)
                                    .addComponent(jCheckBoxUCsRegistadas))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonImportUtilizadores)
                                    .addComponent(jCheckBoxUsersRegistered))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonImportTurnos)
                                    .addComponent(jCheckBoxTurnosRegistados))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonActivateLogins)
                                    .addComponent(jCheckBoxLoginsActive))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonAssignShifts)
                                    .addComponent(jCheckBoxShiftsAssigned))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonProibirTrocas)
                                    .addComponent(jCheckBoxProibirTrocas))))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImportUCsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportUCsActionPerformed
        int confirmed = JOptionPane.YES_OPTION;
        if(this.sgt.isUcsRegistadas()) {
            confirmed = JOptionPane.showConfirmDialog(this,"Isto ira apagar todos os dados importados até agora, tem a certeza que quer continuar?",
                    "Warning!",JOptionPane.OK_CANCEL_OPTION);
        }
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        int returnVal = fc.showOpenDialog(this);
        if(returnVal==JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try{
                makeLoadingScreen("Importing UCs");
                this.setVisible(false);
                this.sgt.importUCs(file.getAbsolutePath());
            }catch(FileNotFoundException e){
                e.printStackTrace();
            }catch(BadlyFormatedFileException e){
                JOptionPane.showMessageDialog(this, "Badly formated file", "Bad file",
                        JOptionPane.ERROR_MESSAGE);
            }finally{
                this.loadingScreen.dispose();
                this.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButtonImportUCsActionPerformed

    private void jButtonImportUtilizadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportUtilizadoresActionPerformed
        int confirmed = JOptionPane.YES_OPTION;
        if(this.sgt.isUsersRegistados()) {
            confirmed = JOptionPane.showConfirmDialog(this,"Isto ira apagar todos os dados importados até agora, excepto as ucs, tem a certeza que quer continuar?",
                    "Warning!",JOptionPane.OK_CANCEL_OPTION);
        }
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        int returnVal = fc.showOpenDialog(this);
        if(returnVal==JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try {
                makeLoadingScreen("Importing Utilizadores");
                this.setVisible(false);
                this.sgt.importUtilizadores(file.getAbsolutePath());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (BadlyFormatedFileException e) {
                JOptionPane.showMessageDialog(this,"Badly formated file","Bad file",
                        JOptionPane.ERROR_MESSAGE);
            }finally{
                this.loadingScreen.dispose();
                this.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButtonImportUtilizadoresActionPerformed

    private void jButtonImportTurnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportTurnosActionPerformed
        int confirmed = JOptionPane.YES_OPTION;
        if(this.sgt.isTurnosRegistados()) {
            confirmed = JOptionPane.showConfirmDialog(this,"Isto ira apagar todos os turnos importados, tem a certeza que quer continuar?",
                    "Warning!",JOptionPane.OK_CANCEL_OPTION);
        }
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        int returnVal = fc.showOpenDialog(this);
        if(returnVal==JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try {
                makeLoadingScreen("Importing Turnos");
                this.setVisible(false);
                this.sgt.importTurnos(file.getAbsolutePath());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (BadlyFormatedFileException e) {
                JOptionPane.showMessageDialog(this,"Badly formated file","Bad file",
                        JOptionPane.ERROR_MESSAGE);
            }finally{
                this.loadingScreen.dispose();
                this.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButtonImportTurnosActionPerformed

    private void jButtonActivateLoginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActivateLoginsActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(this,"Isto ira enviar um email a todos os utilizadores, tem a certeza que quer continuar?",
                "Warning!",JOptionPane.OK_CANCEL_OPTION);
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        makeLoadingScreen("A ativar logins");
        this.setVisible(false);
        this.sgt.activateLogins();
        this.loadingScreen.dispose();
        this.setVisible(true);
    }//GEN-LAST:event_jButtonActivateLoginsActionPerformed

    private void jButtonAssignShiftsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAssignShiftsActionPerformed
        int confirmed = JOptionPane.YES_OPTION;
        if(this.sgt.isTurnosAtribuidos()){
            confirmed = JOptionPane.showConfirmDialog(this,"Isto ira re-distibuir os turnos, tem a certeza que quer continuar?",
                    "Warning!",JOptionPane.OK_CANCEL_OPTION);

        }
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        try {
            makeLoadingScreen("A atribuir turnos");
            this.setVisible(false);
            this.sgt.assignShifts();
        } catch (TurnoCheioException e) {
            JOptionPane.showMessageDialog(this,"Os turnos nao tem capacidade para todos os alunos","Erro",JOptionPane.ERROR_MESSAGE);
        } catch (NaoFoiPossivelAtribuirTurnosException e) {
            JOptionPane.showMessageDialog(this,"Não foi possivel atribuir turnos a todos os alunos","Erro",JOptionPane.ERROR_MESSAGE);
        }finally{
            this.loadingScreen.dispose();
            this.setVisible(true);
        }
    }//GEN-LAST:event_jButtonAssignShiftsActionPerformed

    private void jButtonConsultUCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultUCActionPerformed
        JAdminConsultarUCs consultarUCs = new JAdminConsultarUCs(this.sgt);
        this.setVisible(false);
        consultarUCs.setVisible(true);
        consultarUCs.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent windowEvent) {
                reOpen();
            }
        });
    }//GEN-LAST:event_jButtonConsultUCActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jButtonProibirTrocasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProibirTrocasActionPerformed
        int confirmed = JOptionPane.YES_OPTION;
        if(this.sgt.isTurnosAtribuidos()){
            confirmed = JOptionPane.showConfirmDialog(this,"Isto ira proibir as trocas de turnos entre alunos, tem a certeza que quer continuar?",
                    "Warning!",JOptionPane.OK_CANCEL_OPTION);

        }
        if(!(confirmed ==JOptionPane.YES_OPTION)){
            return;
        }
        makeLoadingScreen("A atribuir turnos");
        this.setVisible(false);
        this.sgt.setTrocasPermitidas(false);
        this.loadingScreen.dispose();
        this.setVisible(true);
    }//GEN-LAST:event_jButtonProibirTrocasActionPerformed

    private void reOpen() {
        this.setVisible(true);
    }

    private void makeLoadingScreen(String title){
        JOptionPane loadingPane = new JOptionPane(title,JOptionPane.INFORMATION_MESSAGE,
                                                 JOptionPane.DEFAULT_OPTION,null,
                                                 new Object[]{},null);
        JDialog dialog = new JDialog();
        dialog.setTitle(title);
        dialog.setContentPane(loadingPane);
//        dialog.setModalityType(Dialog.ModalityType.MODELESS);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dialog.pack();
        dialog.setVisible(true);
        this.loadingScreen = dialog;
    }

    @Override
    public void update(Observable observable, Object o) {
        if(o instanceof Integer){
            int flag = (Integer) o;
            this.checkBoxes[flag].setSelected(true);
            this.disableFrom(flag+1);
            if(flag<NUM_STATES-1) this.buttons[flag+1].setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JAdmin(new SGT()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActivateLogins;
    private javax.swing.JButton jButtonAssignShifts;
    private javax.swing.JButton jButtonConsultUC;
    private javax.swing.JButton jButtonImportTurnos;
    private javax.swing.JButton jButtonImportUCs;
    private javax.swing.JButton jButtonImportUtilizadores;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonProibirTrocas;
    private javax.swing.JCheckBox jCheckBoxLoginsActive;
    private javax.swing.JCheckBox jCheckBoxProibirTrocas;
    private javax.swing.JCheckBox jCheckBoxShiftsAssigned;
    private javax.swing.JCheckBox jCheckBoxTurnosRegistados;
    private javax.swing.JCheckBox jCheckBoxUCsRegistadas;
    private javax.swing.JCheckBox jCheckBoxUsersRegistered;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
